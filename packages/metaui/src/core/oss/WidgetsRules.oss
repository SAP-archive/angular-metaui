/**
 * @license
 * Copyright 2017 SAP Ariba
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Based on original work: MetaUI: Craig Federighi (2008)
 *
 */


object { class: ${ Meta.className(object)} }
object declare { class: ${ Meta.className(object) } }

/*
object { class: ${object.getClass().getName()} }
object declare { class: ${object.getClass().getName()} }
*/

/* for search, force explicit class, not one from object (since that's a hashmap */
operation=search {
    class:${values.get("class")}
}

operation=(edit, create, search) {
    layout { editing:true; }
    class { editing:true; }
    field { editing:true; }
    action { editing:true; }
}
operation=(view, list) {
    layout { editing:false; }
    class { editing:false; }
    field { editing:false; }
    action { editing:false; }
}

field {
    visible:$${!properties.get("hidden")};
    editing=true  { editable:true; }
    editing=false { editable:false; }
}

class {
    @trait=fiveZones {
        zones: zLeft, zMiddle, zRight, zTop, zBottom, zDetail;
        fiveZoneLayout:true;
    }
    @trait=oneZone {
        zones: [zLeft, zDetail];
    }
    @trait=tableZones {
        zones: [zMain, zLeft, zRight, zTop, zBottom, zDetail];
    }

    operation=(create,edit,view,search) {
        trait: fiveZones;
    }
    operation=(list) {
        trait: tableZones;
    }
}
@traitGroup=FormZones {
    @trait=fiveZones;
    @trait=oneZone;
}


field {
    type         { component:StringComponent; bindings:{value:$value} }
    type=boolean {
        editable { component:Checkbox }
    }
    type=(Number) {
        bindings:{formatter:$formatters.integer; };
        editable { component:InputFieldComponent;  }
        operation=search { bindings:{formatter:$formatters.blankNull.integer} }
    }

    type=Date   {
        component:DateAndTimeComponent;
        bindings:{ showTime:false; formatter:shortDate};

        fiveZoneLayout = true {}

         @trait=dateTime editable {
            bindings:{formatter:dateTime; showTime:true};
         }

    }

    type=java.lang.Enum   {
        editable                {
            component:GenericChooserComponent;
            bindings:{
                object:${object};
                key:${field};
                destinationClass:${type};
                displayKey:"name";
                formatter:$formatters.identifier;
            };

            operation=(search, list) {
                bindings: { type:Popup; }
            }
        }
    }

    type=(Array, Set) {
        @trait=enum editable {
            component:GenericChooserComponent;
            bindings:{
                object:${object};
                key:${field};
                multiselect:true;
                destinationClass:${properties.get("enumClass")};
                displayKey:"name";
                formatter:$formatters.identifier;
            };
        }

        operation=(search, list)        { visible:false }

        @trait=ownedToMany {
            after:zDetail;
            component:MetaDetailTable;
        }
    }

    type="[B" {
        editable {
            component:FileUploadChooser; bindings:{ bytes:$value; };
        }
        editable=false {
            bindings: {value:${value ? "" + (value.length + " bytes") : "(none)"}}
        }
    }

    type="File" {
        editable {
            component:FileUploadChooser; bindings:{ file:$value };
        }
        editable=false {
            bindings: {value:${value ? value.name : "(none)"}}
        }
    }


    type=String {
        editable  {
            component:InputFieldComponent
        }
        @trait=longtext {
            after:zBottom;
            editable            { component:TextAreaComponent;
                                  bindings:{cols:60; rows:10} }
            operation=(search, list)  { visible:false }
        }
        @trait=richtext {
            after:zBottom;
            bindings:{escapeUnsafeHtml:true}
            editable            { component:RichTextArea;
                                  bindings:{cols:60; rows:10} }
            operation=(search)  { after:zNone }
            operation=(list)  { editable:false; after:zDetail; }
        }
        @trait=secret {
            bindings:{formatter:$formatters.hiddenPassword};
            editable   { component:AWPasswordField; bindings:{formatter:null} }
            operation=(search, list) { visible: false; }
        }
        trait=truncated { component:TruncateString; bindings:{size:10} }
    }

    type="Binary" {
        @trait=imageData {
            contentType:"image/jpeg";
            editable=false {
                component:AWImageData;
                bindings:{
                    bytes:$value;
                    contentType:${ContentTypeUtils.contentTypeNamed(properties.get("contentType"))}
                }
            }
            editable {
                bindings: { awcontentLayouts:{_main:_imgUploadPreview;} };
            }
        }
    }

    type="Money" {
        component: CurrencyComponent;
        bindings:{
            money:$value;
            currencies:${properties.get("currencies")};
        }
    }

    layout=_imgUploadPreview {
        wrapperComponent:MetaContext; wrapperBindings:{scopeKey:field;};
        component:AWImageData;
        bindings:{
            bytes:$value;
            contentType:${ContentTypeUtils.contentTypeNamed(properties.get("contentType"))};
            style:"width:100px";
        }
    }

    @trait=derived {
        editable:false;
        editing { after:zNone; }
    }

    @trait=searchable {
        operation=search {
            visible:true; editable:true!; after:null!;
        }
    }

    @trait=required {
        operation=(edit, create) {
            required:true;
            object {
                valid: ${( value != undefined && value != null) ? true : "Answer required"}
            }
        }
    }

    @trait=list {
        editable {
            component:GenericChooserComponent;
            bindings:{
                object:${object};
                key:${properties.get("field")};
                list:${properties.get("choices")};
                type:${properties.get("chooserStyle")};
            }
        }
    }


    @trait=asObject {
        editable=false {
            component:MetaObjectDetailComponent;
            nestedLayout:true;
            bindings: {
                object:$value;
                layout:Inspect;
                useNoLabelLayout:true;
                label:${properties.get("label")};
            }
        }
    }


    @trait=asHover {
        editable=false {
            component:HoverCardComponent;
            bindings:{
                linkTitle:$value;
                ngcontentLayout:Content;
                appendContentToBody:false;
            }
        }
    }

     @layout=Content {
        component:MetaObjectDetailComponent;
        bindings: {
            object:$value;
            layout:Inspect;
        }
    }

    @trait=noCreate { operation=create { visible:false } }
    @trait=noSearch { operation=search { visible:false } }

    component=GenericChooserComponent {
        @trait=Popup        { bindings:{type:Dropdown} }
        @trait=PopupControl { bindings:{type:PopupControl} }
        @trait=Chooser      { bindings:{type:Chooser} }

        @trait=PostOnChange { bindings:{action:null} }
    }

    component=(StringComponent,AWHyperlink,PopupMenuLink) {
        @trait=bold {
            wrapperComponent:GenericContainerComponent;
            wrapperBindings: { tagName:b; }
        }
        @trait=italic {
            wrapperComponent:GenericContainerComponent;
            wrapperBindings: { tagName:i; }
        }
        @trait=heading1 {
            wrapperComponent:GenericContainerComponent;
            wrapperBindings: { tagName:h1; }
        }
        @trait=heading2 {
            wrapperComponent:GenericContainerComponent;
            wrapperBindings: { tagName:h2; }
        }
        @trait=heading3 {
            wrapperComponent:GenericContainerComponent;
            wrapperBindings: { tagName:h3; }
        }
    }


}

@traitGroup=FieldType {
    @trait=longtext;
    @trait=richtext;
    @trait=secret;
}

@traitGroup=ChooserType {
    @trait=Popup;
    @trait=PopupControl;
    @trait=Chooser;
}

@traitGroup=WrapperStyle {
    @trait=bold;
    @trait=italic;
    @trait=heading1;
    @trait=heading2;
    @trait=heading3;
}

action {
    visible:$${!properties.get("hidden")};
    enabled:true;

    @trait=pageAction {
        actionResults:${ meta.routingService.routeForPage( properties.get("pageName") ) }
    }

    @trait=modalComponentPage {
        actionResults:${    meta.compPageWithName("MetaModalPage") };
        pageBindings:{
            componentName:${properties.get("componentName")};
            title:${properties.get("title")};
        }
    }

    @trait=modalComponentPanel {
        actionResults:${ meta.compPageWithName("MetaModalPage")};
        pageBindings:{
            componentName:${properties.get("componentName")};
            title:${properties.get("title")};
            clientPanel:true;
        }
    }

    @trait=messageResults {
        message:"Action Performed: %s";
        actionResults:${
            def o = (properties.isInstanceAction) ? object : ariba.ui.aribaweb.util.AWUtil.classForName(properties.class);
            def v = ariba.util.fieldvalue.FieldValue.getFieldValue(o, properties.action);
            def m = ariba.util.core.Fmt.S(properties.message, v);
            ariba.ui.widgets.AribaPageContent.setMessage(m, requestContext.session());
            null};
    }

    @trait=instance {
    	enabled:${object != null};
    	isInstanceAction:true;
    }


    filterActions=instance {
        visible:${properties.get("isInstanceAction") == true}
    }
    filterActions=static {
        visible:${!properties.get("isInstanceAction")}
    }
}


layout {
   zones: [zMain];

    @trait=ActionButtons {
        visible:true;
        component:MetaActionListComponent;
        bindings:{
            renderAs:buttons;
            align:right;
            defaultStyle:primary;
         };
         elementClass:"l-action-buttons";
    }

    @trait=ActionLinks {
        visible:true;
        component:MetaActionListComponent;
        bindings:{
            renderAs:links;
            align:right;
         };
         elementClass:"l-action-buttons";
    }

     @trait=ActionMenu {
        visible:true;
        component:MetaActionListComponent;
        bindings:{
            renderAs:menu;
            align:right;
         };
         elementClass:"l-action-buttons";
    }
    @trait=InstanceActionButtons {
        visible:true;
        component:MetaActionListComponent;
        bindings:{
            renderAs:buttons;
            align:right;
            filterActions:instance;
         };
         elementClass:"l-action-buttons";
    }

    @trait=StaticActionButtons {
        visible:true;
        component:MetaActionListComponent;
        bindings:{
            renderAs:buttons;
            align:right;
            filterActions:static;
         };
         elementClass:"l-action-buttons";
    }

    @trait=Tabs { visible:true; component:MetaTabs }
    @trait=Sections { visible:true; component:MetaSectionsComponent }


    @trait=Form { visible:true; component:MetaFormComponent }
    @trait=Stack { visible:true; component:MetaElementListComponent }

    @trait=OwnZone {
        zonePath:${layout}
    }
    @trait=pad8 {
        wrapperComponent:GenericContainerComponent;
        wrapperBindings:{ tagName:div; style:"padding:8px" }
    }

    component=MetaFormComponent @trait=labelsOnTop;

    layout_trait=labelsOnTop class {
        bindings:{showLabelsAboveControls:true}
    }


}

@traitGroup=LayoutGrouping {
    @trait=Tabs;
    @trait=Sections;
    @trait=Form;
    @trait=Stack;
}

class layout=(Inspect, SearchForm) { trait:Form; label:${UIMeta.beautifyClassName(values.class)}; }
~class layout=(Inspect, SearchForm) {component:StringComponent; bindings:{value:null}; }


layout=InspectWithActions {
    trait:Stack;
    @layout=Actions#ActionMenu;
    @layout=Inspect#Form;
}

layout=ButtonArea { trait:StaticActionButtons }
layout=SelectionButtonArea { trait:InstanceActionButtons }
layout=Links { trait:ActionLinks }


/* Support @Trait("labelField") to identity label field */
layout=LabelField field {
    visible:false;
    @trait=labelField { visible:true! }
}

layout=(Table, DetailTable) class {
    component:MetaTable;
    bindings: {
        displayGroup:$displayGroup;
        enableScrolling:true;
        title:${properties.get("label")};
        singleSelect:true;
        showSelectionColumn:false;
        submitOnSelectionChange:true;
    }
}

layout=ListItem class {
    component:StringComponent;
    bindings:{
        value:${properties.get("objectTitle")};
    }
}
/*
layout=DetailTable class {
    label:$${UIMeta.defaultLabelForIdentifier(field)};
}
*/

object class  { objectTitle:${ FieldPath.getFieldValue(object, meta.displayKeyForClass(values.get("class"))) }; }
object layout { objectTitle:${ FieldPath.getFieldValue(object, meta.displayKeyForClass(values.get("class"))) }; }



module {
    visible:$${!properties.get("hidden")};
    homePage:MetaHomePageComponent;
    pageBindings:${properties.get("homePage") == "MetaHomePageComponent" ? new Map().set("module", values.get("module")) : null};
    component:MetaDashboardLayoutComponent;
    layout { visible:true }

    @trait=ActionTOC {
        @layout=Actions {
           label:"Actions";
           component:"MetaActionListComponent";
           after:zToc;
        }
    }
}


actionCategory {
    visible:$${!properties.get("hidden")};
}

@actionCategory=General { after:zMain;  label:$[a001]General }
